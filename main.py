import telebot
import stuff
import sqlite3 as sql
from telebot import types
from datetime import datetime
import threading
import schedule
import time

print("[INFO] Bot started")

with open("tokfile", 'r') as tf:
    token = tf.readlines()[0].replace('\n', '')

bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id, stuff.start_prompt)


def delete_user(id):
    con = sql.connect('users.db')
    with con:
        cur = con.cursor()
        cur.executescript("""
            DELETE FROM users
            WHERE id == '{}'  
        """.format(id))
        con.commit()


def clear_db():
    con = sql.connect('users.db')
    with con:
        cur = con.cursor()
        cur.executescript("""
            DELETE FROM users  
        """.format(id))
        con.commit()


def set_date(id, date_from):
    con = sql.connect('users.db')
    with con:
        cur = con.cursor()
        cur.execute("""
            SELECT * FROM users
            WHERE id == '{}'  
        """.format(id))
        records = cur.fetchall()
        if len(records) == 0:
            cur.executescript("""
            INSERT INTO users (id, date_from) VALUES ('{}', '{}')  
            """.format(id, date_from))
        else:
            cur.executescript("""
            UPDATE users
            SET date_from='{}'
            WHERE id == '{}' 
            """.format(date_from, id))
        con.commit()


def get_from(id):
    con = sql.connect('users.db')
    with con:
        cur = con.cursor()
        cur.execute("""
            SELECT date_from FROM users
            WHERE id == '{}'  
        """.format(id))
        records = cur.fetchall()
        return records[0][0].split(' ')[0]


def get_users():
    con = sql.connect('users.db')
    with con:
        cur = con.cursor()
        cur.execute("""
            SELECT id FROM users 
        """.format(id))
        records = cur.fetchall()
        return [i[0] for i in records]


@bot.message_handler(commands=['start_challenge'])
def start_challenge_message(message):
    bot.send_message(
        message.chat.id, "–ú—ã –Ω–∞—á–∞–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂!")
    set_date(message.chat.id, datetime.now().strftime("%d/%m/%Y"))


@bot.message_handler(commands=['video'])
def video_message(message):
    bot.send_message(
        message.chat.id, "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –≤–∏–¥–µ–æ")


@bot.message_handler(commands=['books'])
def sbooks_message(message):
    bot.send_message(
        message.chat.id, "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –∫–Ω–∏–≥–∏")


@bot.message_handler(commands=['want_smoke'])
def want_smoke_message(message):
    bot.send_message(
        message.chat.id, "–ù–µ –∫—É—Ä–∏, –±—Ä–∞—Ç")


@bot.message_handler(commands=['reset_timer'])
def start_reset_timer(message):
    bot.send_message(
        message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")


@bot.message_handler(commands=['motivation'])
def start_motivation(message):
    markup = types.ReplyKeyboardMarkup(
        resize_keyboard=True, )
    btn1 = types.KeyboardButton("–ó–¥–æ—Ä–æ–≤—å–µüíä")
    btn2 = types.KeyboardButton("–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—åü§∞")
    btn3 = types.KeyboardButton("–í—Ä–µ–¥ –¥–ª—è –±–ª–∏–∑–∫–∏—Öüíó")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –±–ª–∏–∂–µ –≤—Å–µ–≥–æ".format(
        message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):

    if (message.text == "–ó–¥–æ—Ä–æ–≤—å–µüíä"):
        bot.send_message(
            message.chat.id, "–ü—Ä–µ—Ö–æ–¥—è—â–µ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è.–û–¥—ã—à–∫–∞.", reply_markup=telebot.types.ReplyKeyboardRemove())
    elif (message.text == "–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—åü§∞"):
        bot.send_message(message.chat.id, "–û–π–æ–π–æ–π",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "Good boy",
                         reply_markup=telebot.types.ReplyKeyboardRemove())


@bot.message_handler(commands=['days'])
def start_days(message):
    bot.send_message(
        message.chat.id, "–í—ã –Ω–µ –∫—É—Ä–∏—Ç–µ —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π:")


def notification():
    print("[INFO] Start sending notifications")
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å —É—á–∞—Å—Ç–≤—É—é—Ç
    ids = get_users()
    for id in ids:
        pass


def schedule_func():
    schedule.every(10).seconds.do(notification)
    while run_schedule:
        time.sleep(1)
        schedule.run_pending()


run_schedule = True
threading.Thread(target=schedule_func).start()

bot.infinity_polling()
print("[INFO] Bot closed")
run_schedule = False
